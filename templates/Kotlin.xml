<templateSet group="Kotlin">
  <template name="prcheck" value="val has$name$ = input?.readInt() == 1&#10;if (has$name$) {&#10;  $var$ = input?.read$type$()&#10;}$END$" description="Parcel Read Check" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="capitalize(String)" defaultValue="kotlinSuggestVariableName()" alwaysStopAt="true" />
    <variable name="var" expression="kotlinVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pwcheck" value="val $var$ = $var$&#10;out?.writeInt(if($var$ != null) 1 else 0)&#10;if ($var$ != null) {&#10;  out?.write$type$($var$)$END$&#10;}" description="Android Parcelable write" toReformat="false" toShortenFQNames="true">
    <variable name="var" expression="kotlinVariable()" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="completeSmart()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="rxext" value="fun &lt;T&gt; Observable&lt;T&gt;.async(): Observable&lt;T&gt; = subscribeOn(Schedulers.io())&#10;&#10;fun &lt;T&gt; Flowable&lt;T&gt;.async(): Flowable&lt;T&gt; = subscribeOn(Schedulers.io())&#10;&#10;fun &lt;T&gt; Single&lt;T&gt;.async(): Single&lt;T&gt; = subscribeOn(Schedulers.io())&#10;&#10;fun &lt;T&gt; Maybe&lt;T&gt;.async(): Maybe&lt;T&gt; = subscribeOn(Schedulers.io())&#10;&#10;fun Completable.async(): Completable = subscribeOn(Schedulers.io())&#10;&#10;fun &lt;T&gt; Observable&lt;T&gt;.errorRetry(): Observable&lt;T&gt; = retryWhen { errors -&gt;&#10;  errors.zipWith(Observable.range(1, 3), BiFunction&lt;Throwable, Int, Long&gt; { _, i -&gt; i.toLong() })&#10;    .flatMap { retryCount -&gt; Observable.timer(retryCount, TimeUnit.SECONDS) }&#10;}&#10;&#10;fun &lt;T&gt; Flowable&lt;T&gt;.errorRetry(): Flowable&lt;T&gt; = retryWhen { errors -&gt;&#10;  errors.zipWith(Flowable.range(1, 3), BiFunction&lt;Throwable, Int, Long&gt; { _, i -&gt; i.toLong() })&#10;    .flatMap { retryCount -&gt; Flowable.timer(retryCount, TimeUnit.SECONDS) } &#10;}&#10;&#10;fun &lt;T&gt; Maybe&lt;T&gt;.errorRetry(): Maybe&lt;T&gt; = retryWhen { errors -&gt;&#10;  errors.zipWith(Flowable.range(1, 3), BiFunction&lt;Throwable, Int, Long&gt; { _, i -&gt; i.toLong() })&#10;    .flatMap { retryCount -&gt; Flowable.timer(retryCount, TimeUnit.SECONDS) }&#10;}&#10;&#10;fun &lt;T&gt; Single&lt;T&gt;.errorRetry(): Single&lt;T&gt; = retryWhen { errors -&gt;&#10;  errors.zipWith(Flowable.range(1, 3), BiFunction&lt;Throwable, Int, Long&gt; { _, i -&gt; i.toLong() })&#10;    .flatMap { retryCount -&gt; Flowable.timer(retryCount, TimeUnit.SECONDS) }&#10;}&#10;&#10;fun Completable.errorRetry(): Completable = retryWhen { errors -&gt;&#10;  errors.zipWith(Flowable.range(1, 3), BiFunction&lt;Throwable, Int, Long&gt; { _, i -&gt; i.toLong() })&#10;    .flatMap { retryCount -&gt; Flowable.timer(retryCount, TimeUnit.SECONDS) }&#10;}" description="Rx extesions for android" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>